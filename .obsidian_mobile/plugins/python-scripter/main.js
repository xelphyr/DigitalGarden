/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PythonScripterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var path = __toESM(require("path"));
var fs = __toESM(require("fs"));
var import_child_process = require("child_process");
var DEFAULT_SETTINGS = {
  pythonPath: "",
  pythonExe: ""
  // useLastFile: false
};
var PythonScripterPlugin = class extends import_obsidian.Plugin {
  getBasePath() {
    let basePath;
    if (this.app.vault.adapter instanceof import_obsidian.FileSystemAdapter) {
      basePath = this.app.vault.adapter.getBasePath();
    } else {
      throw new Error("Cannot determine base path.");
    }
    return `${basePath}`;
  }
  async onload() {
    await this.loadSettings();
    var basePath = this.getBasePath();
    var defaultRelativePath = path.join(".", this.app.vault.configDir, "scripts", "python");
    this.pythonDirectory = path.join(basePath, defaultRelativePath);
    this.pythonDirectoryRelative = defaultRelativePath;
    if (this.settings.pythonPath != "") {
      this.pythonDirectory = path.join(basePath, this.settings.pythonPath);
      this.pythonDirectoryRelative = this.settings.pythonPath;
    } else {
      this.pythonDirectory = path.join(basePath, defaultRelativePath);
      this.pythonDirectoryRelative = defaultRelativePath;
    }
    console.log(this.pythonDirectoryRelative);
    try {
      await this.app.vault.createFolder(this.pythonDirectoryRelative);
    } catch (error) {
    }
    var files = fs.readdirSync(this.pythonDirectory);
    for (var index = 0; index < files.length; index++) {
      const filePath = path.join(this.pythonDirectory, files[index]);
      const fileName = files[index];
      const basePath2 = this.getBasePath();
      const obsidianCommand = {
        id: "run-" + files[index],
        name: "Run " + files[index],
        callback: () => {
          fs.stat(filePath, (err, stats) => {
            var _a, _b, _c, _d;
            if (err) {
              console.error(err);
              return;
            }
            let python_exe = "python";
            if (this.settings.pythonExe != "") {
              python_exe = this.settings.pythonExe;
            }
            if (stats.isFile()) {
              var local_current_file_path = (_b = (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.name) == null ? void 0 : _b.toString();
              if (local_current_file_path === void 0) {
                local_current_file_path = "";
              }
              (0, import_child_process.exec)(`${python_exe} "${filePath}" "${basePath2}" "${local_current_file_path}"`, { cwd: this.pythonDirectory }, (error, stdout, stderr) => {
                if (error) {
                  new import_obsidian.Notice(`Error executing script ${filePath}: ${error}`);
                  console.log(`Error executing script ${filePath}: ${error}`);
                  return;
                }
                new import_obsidian.Notice(`Script ` + fileName + ` output:
${stdout}`);
              });
            } else if (stats.isDirectory()) {
              var dir = path.join(filePath);
              var local_current_file_path = (_d = (_c = this.app.workspace.activeEditor) == null ? void 0 : _c.file) == null ? void 0 : _d.path;
              if (local_current_file_path === void 0) {
                local_current_file_path = "";
              }
              (0, import_child_process.exec)(`${python_exe} "${path.join(filePath, "src", "main.py")}" "${basePath2}" "${local_current_file_path}"`, { cwd: dir }, (error, stdout, stderr) => {
                if (error) {
                  new import_obsidian.Notice(`Error executing folder program: ${error}`);
                  console.log(`Error executing folder program: ${error}`);
                  return;
                }
                new import_obsidian.Notice(`Script ` + fileName + " " + basePath2 + ` output:
${stdout}`);
              });
            }
          });
        }
      };
      this.addCommand(obsidianCommand);
    }
    this.addSettingTab(new PythonScripterSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var PythonScripterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Python Script Path").setDesc("Defaults to .obsidian\\scripts\\python").addText((text) => text.setPlaceholder("Enter path").setValue(this.plugin.settings.pythonPath).onChange(async (value) => {
      this.plugin.settings.pythonPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Python Executable").setDesc("Defaults to python").addText((text) => text.setPlaceholder("Enter path or command").setValue(this.plugin.settings.pythonExe).onChange(async (value) => {
      this.plugin.settings.pythonExe = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
